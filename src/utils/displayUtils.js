import MetricsUtils from './metrics.js';
import { MESSAGES } from '../constants/index.js';

/**
 * Utilit√°rios para exibi√ß√£o e formata√ß√£o de resultados
 * @class DisplayUtils
 */
class DisplayUtils {
  /**
   * Exibe resultado da cria√ß√£o do patch de forma bonita
   * @param {Object} result - Resultado da cria√ß√£o do patch
   */
  static displayPatchResult(result) {
    console.log('\n' + '='.repeat(60));
    console.log(MESSAGES.PATCH_CREATED);
    console.log('='.repeat(60));

    console.log('\n‚è±Ô∏è  M√©tricas de Tempo:');
    console.log(`   Tempo de Gera√ß√£o: ${result.durationFormatted}`);

    console.log('\nüìä M√©tricas de Tamanho:');
    console.log(`   Arquivo Original: ${result.oldFile.sizeFormatted}`);
    console.log(`   Arquivo Novo:     ${result.newFile.sizeFormatted}`);
    console.log(`   Patch Gerado:     ${result.patch.sizeFormatted}`);

    console.log('\nüóúÔ∏è  Efici√™ncia de Compress√£o:');
    console.log(`   N√≠vel de Compress√£o: ${result.compression.level}`);
    console.log(`   Taxa de Compress√£o:  ${result.compression.ratio}%`);
    console.log(
      `   Tamanho Economizado:  ${MetricsUtils.formatBytes(
        result.compression.originalSize - result.compression.compressedSize,
      )}`,
    );

    console.log('\nüìÅ Arquivos:');
    console.log(`   Original: ${result.oldFile.path}`);
    console.log(`   Novo:     ${result.newFile.path}`);
    console.log(`   Patch:    ${result.patch.path}`);

    console.log('\n' + '='.repeat(60));
  }

  /**
   * Exibe resultado da aplica√ß√£o do patch de forma bonita
   * @param {Object} result - Resultado da aplica√ß√£o do patch
   */
  static displayApplyResult(result) {
    console.log('\n' + '='.repeat(60));
    console.log(MESSAGES.PATCH_APPLIED);
    console.log('='.repeat(60));

    console.log('\n‚è±Ô∏è  M√©tricas de Tempo:');
    console.log(`   Tempo de Aplica√ß√£o: ${result.durationFormatted}`);

    console.log('\nüìä M√©tricas de Tamanho:');
    console.log(`   Arquivo Original: ${result.oldFile.sizeFormatted}`);
    console.log(`   Patch:            ${result.patch.sizeFormatted}`);
    console.log(`   Arquivo Aplicado: ${result.appliedFile.sizeFormatted}`);

    console.log('\nüìÅ Arquivos:');
    console.log(`   Original: ${result.oldFile.path}`);
    console.log(`   Patch:    ${result.patch.path}`);
    console.log(`   Aplicado: ${result.appliedFile.path}`);

    console.log('\n' + '='.repeat(60));
  }

  /**
   * Exibe informa√ß√µes de arquivo de forma formatada
   * @param {string} label - R√≥tulo do arquivo
   * @param {string} path - Caminho do arquivo
   * @param {Object} info - Informa√ß√µes do arquivo
   */
  static displayFileInfo(label, path, info) {
    console.log(`üìÅ ${label}: ${path}`);
    if (info.exists) {
      console.log(`   Tamanho: ${info.sizeFormatted}`);
      console.log(`   Modificado: ${info.modified.toLocaleString()}`);
    } else {
      console.log(`   ‚ùå Arquivo n√£o encontrado`);
    }
  }

  /**
   * Exibe progresso de uma opera√ß√£o
   * @param {string} message - Mensagem de progresso
   * @param {number} percentage - Porcentagem de progresso (0-100)
   */
  static displayProgress(message, percentage = null) {
    if (percentage !== null) {
      const progressBar = MetricsUtils.createProgressBar(percentage);
      console.log(`üîÑ ${message} ${progressBar}`);
    } else {
      console.log(`üîÑ ${message}...`);
    }
  }

  /**
   * Exibe erro de forma formatada
   * @param {string} title - T√≠tulo do erro
   * @param {string} message - Mensagem do erro
   * @param {Object} details - Detalhes adicionais
   */
  static displayError(title, message, details = null) {
    console.log('\n‚ùå ' + '='.repeat(50));
    console.log(`‚ùå ${title}`);
    console.log('='.repeat(50));
    console.log(`üí¨ ${message}`);
    
    if (details) {
      console.log('\nüìã Detalhes:');
      if (typeof details === 'object') {
        Object.entries(details).forEach(([key, value]) => {
          console.log(`   ${key}: ${value}`);
        });
      } else {
        console.log(`   ${details}`);
      }
    }
    
    console.log('='.repeat(50));
  }

  /**
   * Exibe sucesso de forma formatada
   * @param {string} title - T√≠tulo do sucesso
   * @param {string} message - Mensagem do sucesso
   */
  static displaySuccess(title, message) {
    console.log('\n‚úÖ ' + '='.repeat(50));
    console.log(`‚úÖ ${title}`);
    console.log('='.repeat(50));
    console.log(`üí¨ ${message}`);
    console.log('='.repeat(50));
  }

  /**
   * Exibe informa√ß√µes do sistema
   * @param {Object} systemInfo - Informa√ß√µes do sistema
   */
  static displaySystemInfo(systemInfo) {
    console.log('\nüñ•Ô∏è  Informa√ß√µes do Sistema:');
    console.log('='.repeat(40));
    console.log(`   Plataforma: ${systemInfo.platform}`);
    console.log(`   Arquitetura: ${systemInfo.arch}`);
    console.log(`   Node.js: ${systemInfo.nodeVersion}`);
    console.log(`   Xdelta: ${systemInfo.xdeltaVersion || 'N√£o encontrado'}`);
    console.log('='.repeat(40));
  }

  /**
   * Exibe estat√≠sticas de lote
   * @param {Array} results - Resultados do lote
   */
  static displayBatchStats(results) {
    const total = results.length;
    const success = results.filter(r => r.status === 'success').length;
    const errors = results.filter(r => r.status === 'error').length;
    const skipped = results.filter(r => r.status === 'skipped').length;

    console.log('\nüìä Estat√≠sticas do Lote:');
    console.log('='.repeat(40));
    console.log(`   Total: ${total}`);
    console.log(`   ‚úÖ Sucessos: ${success}`);
    console.log(`   ‚ùå Erros: ${errors}`);
    console.log(`   ‚è≠Ô∏è  Pulados: ${skipped}`);
    console.log(`   üìà Taxa de Sucesso: ${((success / total) * 100).toFixed(1)}%`);
    console.log('='.repeat(40));
  }

  /**
   * Exibe instru√ß√µes de instala√ß√£o do Xdelta
   */
  static displayXdeltaInstallInstructions() {
    console.log('\n‚ùå Xdelta3 n√£o encontrado no sistema.');
    console.log(MESSAGES.XDELTA_INSTALL_INSTRUCTIONS);
  }
}

export default DisplayUtils;
